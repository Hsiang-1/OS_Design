先来先服务
根据作业到达的先后次序安排作业的执行顺序，最先到达的作业最先执行，该算法操作最简单，同时看起来也是最公平，因此在系统中都有应用，但是它没有考虑作业运行时间的长短，如果最先到达的作业需要较长的时间，而稍后到达的作业只需要很短的运行时间，就会导致短作业的长时间等待，使短作业的带权周转的时间增大，而长作业的带权周转时间较小，因此造成长短作业处于事实上的不公平状态。


短作业优先
根据作业提出的运行时间的长短来安排调度顺序，最短的作业最先被调度进入执行状态，显然这是一种照顾短作业的方法，它降低短作业的带权周转时间，却提高了长作业的带权周转时间，对整个系统来说，短作业优先算法可以提高系统的吞吐能力，加块系统的响应时间，但它未考虑在响应时间上的公平，短作业虽然有短的响应时间，但如果系统短作业过多，长作业则会有过长的等待时间。


优先级调度算法
按优先数排队次序工作。分静态和动态：静态是在排队前计算优先数，动态是在调度过程中计算优先数。又可分为用户给定优先数（反映用户要求）和系统给定的优先数，例如，系统给定前台和后台（比如批处理的作业）工作的优先级，一般前台（与用户直接交互的作业）优先。

时间片轮转调度
时间片轮转调度用于分时系统中的进程调度。每次调度时，总是选择就绪队列的队首进程，让其在CPU上运行一个系统预先设置好的时间片。一个时间片内没有完成运行的进程，返回到绪队列末尾重新排队，等待下一次调度。

多级反馈队列算法
不需要事先知道各种进程所需要的执行时间，还可以较好地满足各种类型进程的需要，是目前公认的一种较好的进程调度算法。设置多个就绪队列，在系统中设置多个就绪队列，并为每个队列赋予不同的优先级，从第一个开始逐个降低。不同队列进程中所赋予的执行时间也不同，优先级越高，时间片越小。每个队列都采用FCFS（先来先服务）算法，若进程最后被调到第N队列中时，便采用RR方式运行。
